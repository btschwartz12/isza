// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
)

const deletePost = `-- name: DeletePost :exec
DELETE FROM
    posts
WHERE
    id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT
    id, image_filenames, caption, timestamp, position, photo_count, is_posted, posted_at
FROM
    posts
`

func (q *Queries) GetAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.ImageFilenames,
			&i.Caption,
			&i.Timestamp,
			&i.Position,
			&i.PhotoCount,
			&i.IsPosted,
			&i.PostedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastPositionOfUnpostedPost = `-- name: GetLastPositionOfUnpostedPost :one
SELECT
    position
FROM
    posts
WHERE
    is_posted = 0
ORDER BY
    position DESC
LIMIT
    1
`

func (q *Queries) GetLastPositionOfUnpostedPost(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLastPositionOfUnpostedPost)
	var position int64
	err := row.Scan(&position)
	return position, err
}

const getPostById = `-- name: GetPostById :one
SELECT
    id, image_filenames, caption, timestamp, position, photo_count, is_posted, posted_at
FROM
    posts
WHERE
    id = ?
`

func (q *Queries) GetPostById(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ImageFilenames,
		&i.Caption,
		&i.Timestamp,
		&i.Position,
		&i.PhotoCount,
		&i.IsPosted,
		&i.PostedAt,
	)
	return i, err
}

const getPostByPosition = `-- name: GetPostByPosition :one
SELECT
    id, image_filenames, caption, timestamp, position, photo_count, is_posted, posted_at
FROM
    posts
WHERE
    position = ?
AND
    is_posted = 0
`

func (q *Queries) GetPostByPosition(ctx context.Context, position int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByPosition, position)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ImageFilenames,
		&i.Caption,
		&i.Timestamp,
		&i.Position,
		&i.PhotoCount,
		&i.IsPosted,
		&i.PostedAt,
	)
	return i, err
}

const getPostToPost = `-- name: GetPostToPost :one
SELECT
    id, image_filenames, caption, timestamp, position, photo_count, is_posted, posted_at
FROM
    posts
WHERE
    is_posted = 0
    AND position = 1
LIMIT
    1
`

func (q *Queries) GetPostToPost(ctx context.Context) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostToPost)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ImageFilenames,
		&i.Caption,
		&i.Timestamp,
		&i.Position,
		&i.PhotoCount,
		&i.IsPosted,
		&i.PostedAt,
	)
	return i, err
}

const getUnpostedPosts = `-- name: GetUnpostedPosts :many
SELECT
    id, image_filenames, caption, timestamp, position, photo_count, is_posted, posted_at
FROM
    posts
WHERE
    is_posted = 0
ORDER BY
    position ASC
`

func (q *Queries) GetUnpostedPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getUnpostedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.ImageFilenames,
			&i.Caption,
			&i.Timestamp,
			&i.Position,
			&i.PhotoCount,
			&i.IsPosted,
			&i.PostedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPost = `-- name: InsertPost :one
INSERT INTO
    posts (image_filenames, caption, timestamp, position, photo_count, is_posted)
VALUES
    (?, ?, ?, ?, ?, ?)
RETURNING
    id, image_filenames, caption, timestamp, position, photo_count, is_posted, posted_at
`

type InsertPostParams struct {
	ImageFilenames string
	Caption        string
	Timestamp      string
	Position       int64
	PhotoCount     int64
	IsPosted       int64
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, insertPost,
		arg.ImageFilenames,
		arg.Caption,
		arg.Timestamp,
		arg.Position,
		arg.PhotoCount,
		arg.IsPosted,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ImageFilenames,
		&i.Caption,
		&i.Timestamp,
		&i.Position,
		&i.PhotoCount,
		&i.IsPosted,
		&i.PostedAt,
	)
	return i, err
}

const updateIsPostedValueOfPost = `-- name: UpdateIsPostedValueOfPost :exec
UPDATE
    posts
SET
    is_posted = ?,
    position = ?,
    posted_at = ?
WHERE
    id = ?
`

type UpdateIsPostedValueOfPostParams struct {
	IsPosted int64
	Position int64
	PostedAt sql.NullString
	ID       int64
}

func (q *Queries) UpdateIsPostedValueOfPost(ctx context.Context, arg UpdateIsPostedValueOfPostParams) error {
	_, err := q.db.ExecContext(ctx, updateIsPostedValueOfPost,
		arg.IsPosted,
		arg.Position,
		arg.PostedAt,
		arg.ID,
	)
	return err
}

const updatePostCaption = `-- name: UpdatePostCaption :exec
UPDATE
    posts
SET
    caption = ?
WHERE
    id = ?
`

type UpdatePostCaptionParams struct {
	Caption string
	ID      int64
}

func (q *Queries) UpdatePostCaption(ctx context.Context, arg UpdatePostCaptionParams) error {
	_, err := q.db.ExecContext(ctx, updatePostCaption, arg.Caption, arg.ID)
	return err
}

const updatePostPosition = `-- name: UpdatePostPosition :exec
UPDATE
    posts
SET
    position = ?
WHERE
    id = ?
`

type UpdatePostPositionParams struct {
	Position int64
	ID       int64
}

func (q *Queries) UpdatePostPosition(ctx context.Context, arg UpdatePostPositionParams) error {
	_, err := q.db.ExecContext(ctx, updatePostPosition, arg.Position, arg.ID)
	return err
}
